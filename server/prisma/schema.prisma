generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String    @id @default(uuid())
  email        String    @unique
  password     String
  firstName    String
  lastName     String
  phoneNumber  String?
  role         String    @default("client") // admin, manager, staff, client
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  bookings     Booking[]
  staffProfile Staff?
  messages     Message[] @relation("sender")
  receivedMessages Message[] @relation("recipient")
  notifications Notification[]
}

model Studio {
  id          String    @id @default(uuid())
  name        String
  description String?
  address     String
  city        String
  state       String?
  zipCode     String
  country     String
  timezone    String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  rooms       Room[]
  equipment   Equipment[]
  staff       Staff[]
  studioHours StudioHours[]
  specialDates SpecialDate[]
}

model Room {
  id          String    @id @default(uuid())
  studioId    String
  name        String
  description String?
  capacity    Int?
  hourlyRate  Float
  imageUrl    String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  studio      Studio    @relation(fields: [studioId], references: [id])
  bookings    Booking[]
}

model Equipment {
  id              String    @id @default(uuid())
  studioId        String
  name            String
  description     String?
  category        String?
  dailyRate       Float
  replacementValue Float?
  isAvailable     Boolean   @default(true)
  imageUrl        String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  studio          Studio    @relation(fields: [studioId], references: [id])
  bookings        BookingEquipment[]
}

model Booking {
  id            String    @id @default(uuid())
  userId        String
  roomId        String
  status        String    // pending, confirmed, cancelled, completed
  startTime     DateTime
  endTime       DateTime
  totalPrice    Float
  paymentStatus String    // pending, partial, paid, refunded
  notes         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  user          User      @relation(fields: [userId], references: [id])
  room          Room      @relation(fields: [roomId], references: [id])
  equipment     BookingEquipment[]
  payments      Payment[]
  notifications Notification[]
  messages      Message[]
}

model BookingEquipment {
  id          String    @id @default(uuid())
  bookingId   String
  equipmentId String
  quantity    Int       @default(1)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  booking     Booking   @relation(fields: [bookingId], references: [id])
  equipment   Equipment @relation(fields: [equipmentId], references: [id])

  @@unique([bookingId, equipmentId])
}

model Payment {
  id           String    @id @default(uuid())
  bookingId    String
  amount       Float
  paymentMethod String
  transactionId String?
  paymentDate  DateTime
  status       String    // pending, completed, failed, refunded
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  booking      Booking   @relation(fields: [bookingId], references: [id])
}

model Staff {
  id       String    @id @default(uuid())
  userId   String    @unique
  studioId String
  position String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user     User      @relation(fields: [userId], references: [id])
  studio   Studio    @relation(fields: [studioId], references: [id])
}

model Notification {
  id             String    @id @default(uuid())
  userId         String
  bookingId      String?
  type           String    // booking_confirmation, reminder, cancellation, payment
  content        String
  isRead         Boolean   @default(false)
  deliveryMethod String    // email, sms, in_app
  sentAt         DateTime
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  user           User      @relation(fields: [userId], references: [id])
  booking        Booking?  @relation(fields: [bookingId], references: [id])
}

model Message {
  id          String    @id @default(uuid())
  senderId    String
  recipientId String
  bookingId   String?
  content     String
  isRead      Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  sender      User      @relation("sender", fields: [senderId], references: [id])
  recipient   User      @relation("recipient", fields: [recipientId], references: [id])
  booking     Booking?  @relation(fields: [bookingId], references: [id])
}

model StudioHours {
  id         String    @id @default(uuid())
  studioId   String
  dayOfWeek  Int       // 0-6 (Sunday-Saturday)
  openTime   String
  closeTime  String
  isClosed   Boolean   @default(false)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  studio     Studio    @relation(fields: [studioId], references: [id])
}

model SpecialDate {
  id         String    @id @default(uuid())
  studioId   String
  date       DateTime
  isClosed   Boolean   @default(false)
  openTime   String?
  closeTime  String?
  note       String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  studio     Studio    @relation(fields: [studioId], references: [id])
}
